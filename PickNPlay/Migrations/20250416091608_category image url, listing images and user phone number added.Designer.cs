// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PickNPlay.picknplay_dal.Data;

#nullable disable

namespace PickNPlay.Migrations
{
    [DbContext(typeof(picknplayContext))]
    [Migration("20250416091608_category image url, listing images and user phone number added")]
    partial class categoryimageurllistingimagesanduserphonenumberadded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("category_name");

                    b.HasKey("CategoryId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Deposit", b =>
                {
                    b.Property<int>("DepositId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("deposit_id");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("deposit_amount");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("session_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("deposit_status");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("DepositId")
                        .HasName("PK_Deposits");

                    b.HasIndex("UserId");

                    b.ToTable("deposits");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Favourite", b =>
                {
                    b.Property<int>("FavouriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("favourite_id");

                    b.Property<int>("ListingId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("listing_id");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("FavouriteId");

                    b.HasIndex("ListingId");

                    b.HasIndex("UserId");

                    b.ToTable("favourites");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Listing", b =>
                {
                    b.Property<int>("ListingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("listing_id");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("amount");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("final_price");

                    b.Property<int>("Likes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("likes_amount");

                    b.Property<decimal>("SellerPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("seller_price");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER")
                        .HasColumnName("views_amount");

                    b.HasKey("ListingId");

                    b.HasIndex(new[] { "CategoryId" }, "IX_listings_category_id");

                    b.HasIndex(new[] { "UserId" }, "IX_listings_user_id");

                    b.ToTable("listings");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.ListingImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ListingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("ListingsImages");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("message_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ListingId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("listing_id");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("receiver_id");

                    b.Property<int>("SenderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sender_id");

                    b.Property<bool>("isRead")
                        .HasColumnType("INTEGER")
                        .HasColumnName("isRead");

                    b.HasKey("MessageId");

                    b.HasIndex("ListingId");

                    b.HasIndex(new[] { "ReceiverId" }, "IX_messages_receiver_id");

                    b.HasIndex(new[] { "SenderId" }, "IX_messages_sender_id");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("review_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rating");

                    b.Property<int>("TransactionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("transaction_id");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId");

                    b.HasIndex(new[] { "TransactionId" }, "IX_reviews_transaction_id");

                    b.HasIndex(new[] { "UserId" }, "IX_reviews_user_id");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("transaction_id");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("amount");

                    b.Property<int>("BuyerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("buyer_id");

                    b.Property<decimal>("BuyerPaid")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("buyer_paid");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ListingId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("listing_id");

                    b.Property<decimal>("SellerGet")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("seller_get");

                    b.Property<int>("SellerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("seller_id");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("session_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("In Process")
                        .HasColumnName("status");

                    b.HasKey("TransactionId");

                    b.HasIndex(new[] { "BuyerId" }, "IX_transactions_buyer_id");

                    b.HasIndex(new[] { "ListingId" }, "IX_transactions_listing_id");

                    b.HasIndex(new[] { "SellerId" }, "IX_transactions_seller_id");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("balance");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<bool?>("EmailApproved")
                        .HasColumnType("INTEGER")
                        .HasColumnName("email_approved");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("email_verified_at");

                    b.Property<string>("NumberVerificationToken")
                        .HasColumnType("TEXT")
                        .HasColumnName("number_verification_token");

                    b.Property<DateTime?>("NumberVerifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("number_verified_at");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("TEXT")
                        .HasColumnName("password_reset_token");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone_number");

                    b.Property<bool?>("PhoneNumberApproved")
                        .HasColumnType("INTEGER")
                        .HasColumnName("phone_number_approved");

                    b.Property<string>("ProfileDescription")
                        .HasColumnType("text")
                        .HasColumnName("profile_description");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("TEXT")
                        .HasColumnName("reset_token_expires");

                    b.Property<string>("UserImage")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_image");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_role_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("TEXT")
                        .HasColumnName("email_verification_token");

                    b.HasKey("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.UserRating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("rating_id");

                    b.Property<int>("NumberOfReviews")
                        .HasColumnType("INTEGER")
                        .HasColumnName("number_of_reviews");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rating");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("RatingId");

                    b.HasIndex("UserId");

                    b.ToTable("user_rating");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_role_id");

                    b.Property<string>("UserRoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_role_name");

                    b.HasKey("UserRoleId");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Deposit", b =>
                {
                    b.HasOne("PickNPlay.picknplay_dal.Entities.User", "User")
                        .WithMany("Deposits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_deposits_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Favourite", b =>
                {
                    b.HasOne("PickNPlay.picknplay_dal.Entities.Listing", "Listing")
                        .WithMany("Favourites")
                        .HasForeignKey("ListingId")
                        .IsRequired()
                        .HasConstraintName("FK_favourites_listings");

                    b.HasOne("PickNPlay.picknplay_dal.Entities.User", "User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_favourites_users");

                    b.Navigation("Listing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Listing", b =>
                {
                    b.HasOne("PickNPlay.picknplay_dal.Entities.Category", "Category")
                        .WithMany("Listings")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_listings_categories");

                    b.HasOne("PickNPlay.picknplay_dal.Entities.User", "User")
                        .WithMany("Listings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_listings_users");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.ListingImage", b =>
                {
                    b.HasOne("PickNPlay.picknplay_dal.Entities.Listing", "Listing")
                        .WithMany("ListingImages")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Message", b =>
                {
                    b.HasOne("PickNPlay.picknplay_dal.Entities.Listing", "Listing")
                        .WithMany("Messages")
                        .HasForeignKey("ListingId");

                    b.HasOne("PickNPlay.picknplay_dal.Entities.User", "Receiver")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK_messages_receivers");

                    b.HasOne("PickNPlay.picknplay_dal.Entities.User", "Sender")
                        .WithMany("MessageSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_messages_senders");

                    b.Navigation("Listing");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Review", b =>
                {
                    b.HasOne("PickNPlay.picknplay_dal.Entities.Transaction", "Transaction")
                        .WithMany("Reviews")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FK_reviews_transactions");

                    b.HasOne("PickNPlay.picknplay_dal.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_reviews_users");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Transaction", b =>
                {
                    b.HasOne("PickNPlay.picknplay_dal.Entities.User", "Buyer")
                        .WithMany("TransactionBuyers")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK_transactions_buyers");

                    b.HasOne("PickNPlay.picknplay_dal.Entities.Listing", "Listing")
                        .WithMany("Transactions")
                        .HasForeignKey("ListingId")
                        .IsRequired()
                        .HasConstraintName("FK_transactions_listings");

                    b.HasOne("PickNPlay.picknplay_dal.Entities.User", "Seller")
                        .WithMany("TransactionSellers")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_transactions_sellers");

                    b.Navigation("Buyer");

                    b.Navigation("Listing");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.User", b =>
                {
                    b.HasOne("PickNPlay.picknplay_dal.Entities.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("FK_users_user_roles");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.UserRating", b =>
                {
                    b.HasOne("PickNPlay.picknplay_dal.Entities.User", "User")
                        .WithMany("UserRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_user_ratings_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Category", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Listing", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("ListingImages");

                    b.Navigation("Messages");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.Transaction", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.User", b =>
                {
                    b.Navigation("Deposits");

                    b.Navigation("Favourites");

                    b.Navigation("Listings");

                    b.Navigation("MessageReceivers");

                    b.Navigation("MessageSenders");

                    b.Navigation("Reviews");

                    b.Navigation("TransactionBuyers");

                    b.Navigation("TransactionSellers");

                    b.Navigation("UserRatings");
                });

            modelBuilder.Entity("PickNPlay.picknplay_dal.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
